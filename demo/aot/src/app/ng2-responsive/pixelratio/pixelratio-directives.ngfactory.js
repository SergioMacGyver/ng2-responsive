/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import0 = require('../../../../../src/app/ng2-responsive/pixelratio/pixelratio-directives');
var import1 = require('@angular/core/src/change_detection/change_detection');
var import2 = require('@angular/core/src/linker/view_utils');
var Wrapper_Is1xPixel = (function () {
    function Wrapper_Is1xPixel(p0, p1, p2) {
        this.changed = false;
        this._is1xPixel = import1.UNINITIALIZED;
        this.context = new import0.Is1xPixel(p0, p1, p2);
    }
    Wrapper_Is1xPixel.prototype.check_is1xPixel = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._is1xPixel, currValue))) {
            this.changed = true;
            this.context.is1xPixel = currValue;
            this._is1xPixel = currValue;
        }
    };
    Wrapper_Is1xPixel.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        return changed;
    };
    return Wrapper_Is1xPixel;
}());
exports.Wrapper_Is1xPixel = Wrapper_Is1xPixel;
var Wrapper_IsRetina = (function () {
    function Wrapper_IsRetina(p0, p1, p2) {
        this.changed = false;
        this._isRetina = import1.UNINITIALIZED;
        this.context = new import0.IsRetina(p0, p1, p2);
    }
    Wrapper_IsRetina.prototype.check_isRetina = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._isRetina, currValue))) {
            this.changed = true;
            this.context.isRetina = currValue;
            this._isRetina = currValue;
        }
    };
    Wrapper_IsRetina.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        return changed;
    };
    return Wrapper_IsRetina;
}());
exports.Wrapper_IsRetina = Wrapper_IsRetina;
var Wrapper_Is4k = (function () {
    function Wrapper_Is4k(p0, p1, p2) {
        this.changed = false;
        this._isRetina = import1.UNINITIALIZED;
        this.context = new import0.Is4k(p0, p1, p2);
    }
    Wrapper_Is4k.prototype.check_isRetina = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._isRetina, currValue))) {
            this.changed = true;
            this.context.isRetina = currValue;
            this._isRetina = currValue;
        }
    };
    Wrapper_Is4k.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        return changed;
    };
    return Wrapper_Is4k;
}());
exports.Wrapper_Is4k = Wrapper_Is4k;
var Wrapper_PixelRatioInfo = (function () {
    function Wrapper_PixelRatioInfo(p0, p1) {
        this.changed = false;
        this._pixelratioInfo = import1.UNINITIALIZED;
        this.context = new import0.PixelRatioInfo(p0, p1);
    }
    Wrapper_PixelRatioInfo.prototype.check_pixelratioInfo = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._pixelratioInfo, currValue))) {
            this.changed = true;
            this.context.pixelratioInfo = currValue;
            this._pixelratioInfo = currValue;
        }
    };
    Wrapper_PixelRatioInfo.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    return Wrapper_PixelRatioInfo;
}());
exports.Wrapper_PixelRatioInfo = Wrapper_PixelRatioInfo;
//# sourceMappingURL=pixelratio-directives.ngfactory.js.map